TICK Stack Docker
-------------

1.DOCKER-COMPOSE
-----------------
Run the complete TICK stack using this docker-compose file. By using docker-compose all four official TICK stack images are started and linked together.

Steps followed(for installing TICK stack on docker)

Start all the images as follows:

docker-compose up -d

Verify that all docker processes are running using this command:

docker ps
CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                                                                    NAMES
c5e0aa0294b6        chronograf:1.0.0-rc1   "/entrypoint.sh ch..."   3 minutes ago       Up 2 minutes        0.0.0.0:10000->10000/tcp                                                 dockercompose_chronograf_1
5fc8f1a8b35d        telegraf:1.0.0-rc1     "/entrypoint.sh te..."   3 minutes ago       Up 2 minutes        0.0.0.0:8092->8092/udp, 0.0.0.0:8125->8125/udp, 0.0.0.0:8094->8094/tcp   dockercompose_telegraf_1
61df5e4550cf        kapacitor:1.0.0-rc1    "/entrypoint.sh ka..."   3 minutes ago       Up 2 minutes        0.0.0.0:9092->9092/tcp                                                   dockercompose_kapacitor_1
e094816bfbda        influxdb:1.0.0-rc1     "/entrypoint.sh in..."   3 minutes ago       Up 3 minutes        0.0.0.0:8086->8086/tcp                                                   dockercompose_influxdb_1

Checking that InfluxDB works:

Run this curl command, if no errors occur InfluxDB is running:

curl http://localhost:8086/ping

The influx client

Use the built-in influx cli service:

docker-compose run influxdb-cli

Check that Telegraf works.

By default, the Telegraf creates a telegraf database. Check that InfluxDB has such a database in addition to the _internal database.

docker-compose run influxdb-cli

> show databases
name: databases
---------------
name
telegraf
_internal

We can verify that _internal database Infact exits.

To use telegraf database, Use this command: This should connect you to the telegraf database and you can use the show measurements command to see the measurements in this Databases

> use telegraf
Using database telegraf

> show measurements
name: measurements
------------------
name
cpu
disk
diskio
mem
swap
system

Check that Chronograf works

Access the Chronograf inteface, http://localhost:10000

Add InfluxDB server.

Check Kapacitor works

First, run this curl command, if no errors occur Kapacitor is running:

curl http://localhost:9092/kapacitor/v1/ping
Use the built-in kapacitor cli service:

To connect to kapacitor cli use this :docker-compose run kapacitor-cli

$ kapacitor list tasks
root@99ab493de8c4:/# kapacitor list tasks
ID                            Type      Status    Executing Databases and Retention Policies

Confirm Kapacitor is subscribed to all databases in InfluxDB

docker-compose run influxdb-cli

> show subscriptions
name: telegraf
--------------
retention_policy	name						mode	destinations
autogen			kapacitor-8dee0478-8fa0-464f-92c1-2393d4a92904	ANY	[http://kapacitor:9092]


name: _internal
---------------
retention_policy	name						mode	destinations
monitor			kapacitor-8dee0478-8fa0-464f-92c1-2393d4a92904	ANY	[http://kapacitor:9092]


2.LOCALHOST
-------------------

Install everything needed:

Influxdb
---------
wget https://dl.influxdata.com/influxdb/releases/influxdb-1.1.1.x86_64.rpm

sudo yum install influxdb-1.1.1.x86_64.rpm

cat <<EOF | sudo tee /etc/yum.repos.d/influxdb.repo
[influxdb]
name = InfluxDB Repository - RHEL \$releasever
baseurl = https://repos.influxdata.com/rhel/\$releasever/\$basearch/stable
enabled = 1
gpgcheck = 1
gpgkey = https://repos.influxdata.com/influxdb.key
EOF

sudo yum install influxdb
sudo systemctl start influxdb

influxd -config /etc/influxdb/influxdb.conf

echo $INFLUXDB_CONFIG_PATH
/etc/influxdb/influxdb.conf

influxd

Telegraf
--------

wget https://dl.influxdata.com/telegraf/releases/telegraf-1.1.1.x86_64.rpm

sudo yum install telegraf-1.1.1.x86_64.rpm

cat <<EOF | sudo tee /etc/yum.repos.d/influxdb.repo
  [influxdb]
  name = InfluxDB Repository - RHEL \$releasever
  baseurl = https://repos.influxdata.com/rhel/\$releasever/\$basearch/stable
  enabled = 1
  gpgcheck = 1
  gpgkey = https://repos.influxdata.com/influxdb.key
  EOF

sudo yum install telegraf

sudo systemctl start telegraf

telegraf -sample-config > telegraf.conf

Kapacitor
-----------

wget https://dl.influxdata.com/kapacitor/releases/kapacitor_1.1.1_amd64.deb

sudo dpkg -i kapacitor_1.1.1_amd64.deb

kapacitord -config /usr/local/etc/kapacitor.conf

sudo systemctl start kapacitor

Tickscript

stream
        |from()
                .measurement('cpu')
                .where(lambda: "cpu" == 'cpu-total')

        |alert()
                .info(lambda: TRUE)
                .warn(lambda: "usage_idle < 80")
                .crit(lambda: "usage_idle < 70")
                .log('/tmp/alert.log')

kapacitor define -name cpu_alert -type stream -tick cpu_alert.tick -dbrp kapacitor_example.default

kapacitor show cpu_alert

kapacitor enable cpu_alert

kapacitor record stream -name cpu_alert -duration 20s

kapacitor list recordings

cat /tmp/alerts.log

3.DOCKER
---------
docker run -d --name influxdb -p 8083:8083 -p 8086:8086 influxdb

docker run -d --name telegraf --net=container:influxdb -v ~/telegraf.conf:/etc/telegraf/telegraf.conf:ro telegraf

docker run -p 9092:9092 -d --link influxdb:influxdb --name kapacitor -v ~/Downloads/kapacitor.conf:/etc/kapacitor/kapacitor.conf:ro -v ~/tick/:/root -w=/root kapacitor

Created a tick-script and added to the -/tick folder

kapacitor define cpu_alert -type stream -tick ~/cpu_alert.tick -dbrp telegraf.autogen

kapacitor show cpu_alert

kapacitor enable cpu_alert

kapacitor stats ingress

cat /var/log/kapacitor

Now the ip of the "kapacitor" container is found out  using 'docker inspect kapacitor'.
and passed into the brwoser
e.g. http://172.17.0.3:9092/kapacitor/v1/tasks
